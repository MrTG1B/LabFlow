/**
 * @file Firestore Security Rules
 * @description This ruleset implements a public-read, owner-write model for inventory items,
 *              and restricts user data access to the owning user. It prioritizes security
 *              by enforcing strict ownership checks and preventing unauthorized data modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /inventory/{inventoryItemId}: Stores inventory items, publicly readable, but only
 *   modifiable by the user who created them (owner).
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Inventory items are publicly readable, but write access is restricted to the item's owner.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - Inventory items must contain a `creatorId` field that matches the authenticated user's UID
 *   upon creation. This field is immutable after creation.
 *
 * Structural Segregation:
 * - User profile data and inventory data are stored in separate collections to allow for
 *   different access control policies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.uid
     * @deny (list) Always deny listing users
     * @deny (create) if request.auth.uid != request.resource.data.uid
     * @principle Enforces strict user ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Users can only read their own profile.
      allow get: if isOwner(userId);
      allow list: if false;

      // Users can only create their own profile, and the uid in the request must match the document ID.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Users can only update their own profile. Enforce immutability of the uid field.
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;

      // Users can only delete their own profile.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure inventory items. Inventory items are publicly readable, but only the
     *              creator can modify or delete them.
     * @path /inventory/{inventoryItemId}
     * @allow (get, list) if true
     * @allow (create) if request.resource.data.creatorId == request.auth.uid
     * @allow (update, delete) if resource.data.creatorId == request.auth.uid
     * @deny (create) if request.resource.data.creatorId != request.auth.uid
     * @principle Allows public read access, but enforces owner-only write access.
     */
    match /inventory/{inventoryItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(creatorId) {
        return isSignedIn() && request.auth.uid == creatorId;
      }

      function isExistingOwner(creatorId) {
        return isOwner(creatorId) && resource != null;
      }

      // Anyone can read inventory items.
      allow get, list: if true;

      // Only the owner can create an inventory item, and the creatorId must match the user's UID.
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;

      // Only the owner can update an existing inventory item.  creatorId is immutable.
      allow update: if isExistingOwner(resource.data.creatorId) && request.resource.data.creatorId == resource.data.creatorId;

      // Only the owner can delete an existing inventory item.
      allow delete: if isExistingOwner(resource.data.creatorId);
    }
  }
}