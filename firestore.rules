/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a mixed security model, providing user-owned data trees under `/users/{userId}` and public read access to inventory and vendor data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the owner.
 * - /inventory/{inventoryItemId}: Stores inventory items, publicly readable, but only updatable and deletable by the item owner.
 * - /vendors/{vendorId}: Stores vendor information, publicly readable, but only creatable, updatable, and deletable by the vendor owner.
 * - /inventoryItemTypes/{typeId}: Stores user-defined inventory item types, publicly readable, but only creatable, updatable, and deletable by the type owner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Inventory items, vendors, and item types are publicly readable to facilitate discovery.
 * - Inventory items, vendors, and item types can only be created, updated, or deleted by an authenticated user. The user's ID is not explicitly tracked on the documents.
 *   Instead, we allow any authenticated user to create, update, and delete.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, list) User with matching UID can read their own profile.
     * @allow (create, update, delete) User with matching UID can create/update/delete their own profile.
     * @deny (get, list) User trying to read another user's profile.
     * @deny (create, update, delete) User trying to modify another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      // Allow the user to read their own profile.
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the user to create their own profile, enforcing that the ID matches.
      allow create: if isOwner(userId);

      // Allow the user to update their own profile, ensuring the ID is immutable.
      allow update: if isExistingOwner(userId);

      // Allow the user to delete their own profile.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to inventory items.
     * @path /inventory/{inventoryItemId}
     * @allow (get, list) Any user can read inventory items.
     * @allow (create) Any authenticated user can create an inventory item.
     * @allow (update, delete) Any authenticated user can update/delete an inventory item.
     * @deny (create) Unauthenticated users cannot create inventory items.
     * @deny (update, delete) Unauthenticated users cannot update/delete inventory items.
     * @principle Allows public read access with authenticated write access.
     */
    match /inventory/{inventoryItemId} {
      // Allow anyone to read inventory items.
      allow get, list: if true;

      // Allow any authenticated user to create inventory items.
      allow create: if isSignedIn();

      // Allow any authenticated user to update inventory items.
      allow update: if isSignedIn() && resource != null;

      // Allow any authenticated user to delete inventory items.
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to vendor data.
     * @path /vendors/{vendorId}
     * @allow (get, list) Any user can read vendor data.
     * @allow (create) Any authenticated user can create vendor data.
     * @allow (update, delete) Any authenticated user can update/delete vendor data.
     * @deny (create) Unauthenticated users cannot create vendor data.
     * @deny (update, delete) Unauthenticated users cannot update/delete vendor data.
     * @principle Allows public read access with authenticated write access.
     */
    match /vendors/{vendorId} {
      // Allow anyone to read vendor data.
      allow get, list: if true;

      // Allow any authenticated user to create vendor data.
      allow create: if isSignedIn();

      // Allow any authenticated user to update vendor data.
      allow update: if isSignedIn() && resource != null;

      // Allow any authenticated user to delete vendor data.
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to inventory item types.
     * @path /inventoryItemTypes/{typeId}
     * @allow (get, list) Any user can read inventory item types.
     * @allow (create) Any authenticated user can create an inventory item type.
     * @allow (update, delete) Any authenticated user can update/delete an inventory item type.
     * @deny (create) Unauthenticated users cannot create inventory item types.
     * @deny (update, delete) Unauthenticated users cannot update/delete inventory item types.
     * @principle Allows public read access with authenticated write access.
     */
    match /inventoryItemTypes/{typeId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}