/**
 * @fileoverview Firestore Security Rules for the lab inventory application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on a combination of
 * ownership and public read permissions. It enforces strict control over
 * write operations, ensuring that only authenticated users can create, update,
 * or delete data, with appropriate ownership checks. Data shape validation is relaxed for prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the
 *   authenticated user with the matching ID.
 * - /inventory/{inventoryItemId}: Stores inventory items. Publicly readable,
 *   but write access is restricted to authenticated users, and requires that
 *   they set valid ownership.
 * - /vendors/{vendorId}: Stores vendor information, with similar public read
 *   and owner-restricted write permissions.
 * - /inventoryItemTypes/{typeId}: Stores user-defined inventory item types, with similar public read
 *   and owner-restricted write permissions.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the /inventory, /vendors, and /inventoryItemTypes collections to enable wide data sharing,
 *   but write access is strictly controlled using an ownership-based model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can access their own profile.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (get, update, delete) - An unauthenticated user cannot access a user profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get, update, delete) - A user cannot access another user's profile.
     * @principle Enforces user-ownership for user profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner() {
          return request.auth.uid == resource.data.ownerId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Secure inventory items.
     * @path /inventory/{inventoryItemId}
     * @allow (get, list) - Anyone can read inventory items.
     * @allow (create) - Authenticated user can create an item and must set ownerId to their uid.
     * @allow (update, delete) - Only the owner of the item can update or delete it.
     * @deny (create) - An unauthenticated user cannot create an item.
     * @deny (create) - A user cannot create an item with an ownerId that does not match their own uid.
     * @deny (update, delete) - A user cannot update or delete an item they don't own.
     * @principle Public read, owner-only writes with ownership validation on create, update, and delete.
     */
    match /inventory/{inventoryItemId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }
      function isCreatingOwner() {
          return request.auth.uid == request.resource.data.ownerId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Secure vendors.
     * @path /vendors/{vendorId}
     * @allow (get, list) - Anyone can read vendor data.
     * @allow (create) - Authenticated user can create a vendor, id matches.
     * @allow (update, delete) - Only the owner of the vendor can update or delete it.
     * @deny (create) - An unauthenticated user cannot create a vendor.
     * @deny (update, delete) - A user cannot update or delete a vendor they don't own.
     * @principle Public read, owner-only writes with ownership validation on create, update, and delete.
     */
    match /vendors/{vendorId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isOwner() {
          return request.auth.uid == resource.data.ownerId;
        }
        function isCreatingOwner() {
            return request.auth.uid == request.resource.data.ownerId;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwner();
        allow update: if isSignedIn() && isOwner();
        allow delete: if isSignedIn() && isOwner();
    }

        /**
         * @description Secure inventory item types.
         * @path /inventoryItemTypes/{typeId}
         * @allow (get, list) - Anyone can read inventory item types.
         * @allow (create) - Authenticated user can create an item type, id must match.
         * @allow (update, delete) - Only the owner of the item type can update or delete it.
         * @deny (create) - An unauthenticated user cannot create an item type.
         * @deny (update, delete) - A user cannot update or delete an item type they don't own.
         * @principle Public read, owner-only writes with ownership validation on create, update, and delete.
         */
        match /inventoryItemTypes/{typeId} {
            function isSignedIn() {
              return request.auth != null;
            }
            function isOwner() {
              return request.auth.uid == resource.data.ownerId;
            }
           function isCreatingOwner() {
                return request.auth.uid == request.resource.data.ownerId;
            }

            allow get, list: if true;
            allow create: if isSignedIn() && isCreatingOwner();
            allow update: if isSignedIn() && isOwner();
            allow delete: if isSignedIn() && isOwner();
        }
  }
}