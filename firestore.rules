/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a basic security model, allowing read access to all authenticated users while restricting write access based on document ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the owning user.
 * - /inventory/{inventoryItemId}: Stores inventory item data, write access not granted in current setup.
 * - /vendors/{vendorId}: Stores vendor data, write access not granted in current setup.
 * - /inventoryItemTypes/{typeId}: Stores user-defined inventory item types, write access not granted in current setup.
 *
 * Key Security Decisions:
 * - User data is strictly private; only the owning user can read or write their profile.
 * - Listing users is not permitted.
 * - Inventory and vendor data have read access for all authenticated users, but no write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for updates by verifying the resource exists.
     * @param {string} ownerId The user ID of the owner.
     * @return {bool} True if the owner matches and the document exists, false otherwise.
     */
    function isValidUpdate() {
      return resource.data.id == request.resource.data.id;
    }

    /**
     * @description Rules for user profile data.
     * @path /users/{userId}
     * @allow (get) If the user is the owner of the profile.
     * @allow (create) If the user's UID matches the userId in the path.
     * @deny (update) If the user is not the owner of the profile.
     * @deny (delete) If the user is not the owner of the profile.
     * @principle Enforces user-ownership: Only a user can access their own profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && isValidUpdate();
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for inventory items.
     * @path /inventory/{inventoryItemId}
     * @allow (get) Any authenticated user can read inventory items.
     * @deny (create) No one can create inventory items.
     * @deny (update) No one can update inventory items.
     * @deny (delete) No one can delete inventory items.
     * @principle Public read, owner-only write (not yet implemented, writes are denied).
     */
    match /inventory/{inventoryItemId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for vendors.
     * @path /vendors/{vendorId}
     * @allow (get) Any authenticated user can read vendor data.
     * @deny (create) No one can create vendor data.
     * @deny (update) No one can update vendor data.
     * @deny (delete) No one can delete vendor data.
     * @principle Public read, owner-only write (not yet implemented, writes are denied).
     */
    match /vendors/{vendorId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

        /**
         * @description Rules for inventory item types.
         * @path /inventoryItemTypes/{typeId}
         * @allow (get) Any authenticated user can read inventory item types.
         * @deny (create) No one can create inventory item types.
         * @deny (update) No one can update inventory item types.
         * @deny (delete) No one can delete inventory item types.
         * @principle Public read, owner-only write (not yet implemented, writes are denied).
         */
        match /inventoryItemTypes/{typeId} {
            allow get: if isSignedIn();
            allow list: if isSignedIn();
            allow create: if false;
            allow update: if false;
            allow delete: if false;
        }
  }
}