/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to inventory items.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with access restricted to the user themselves.
 * - /inventory/{inventoryItemId}: Stores inventory item data, publicly readable, but writable by no one.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own profile data.
 * - Inventory items are read-only for all users.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - The User document's `uid` field must match the `userId` path segment to ensure ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile at /users/anotherUser.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @deny (get) User with UID 'user123' cannot read another user's profile at /users/anotherUser.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @deny (update) User with UID 'user123' cannot update another user's profile at /users/anotherUser.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny (delete) User with UID 'user123' cannot delete another user's profile at /users/anotherUser.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to inventory item documents.
     * @path /inventory/{inventoryItemId}
     * @allow (get) Any user can retrieve inventory items.
     * @allow (list) Any user can list inventory items.
     * @deny (create) No user can create inventory items.
     * @deny (update) No user can update inventory items.
     * @deny (delete) No user can delete inventory items.
     * @principle Allows public read access but restricts all write access.
     */
    match /inventory/{inventoryItemId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}