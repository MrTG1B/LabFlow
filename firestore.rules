/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization while relaxing data validation to
 * enable rapid prototyping. It enforces user-ownership and prevents unauthorized
 * data access, but does not strictly enforce data shapes.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Access is restricted to the owning user.
 * - /inventory/{inventoryItemId}: Stores inventory item data. Currently, access is public.
 * - /vendors/{vendorId}: Stores vendor data. Currently, access is public.
 * - /inventoryItemTypes/{typeId}: Stores user-defined inventory item types. Currently, access is public.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for the /inventory, /vendors, and /inventoryItemTypes collections to facilitate easy data exploration.
 * - Owner-only write access is enforced for user profiles.
 *
 * Denormalization for Authorization:
 *  Not applicable in this simple ruleset. Complex authorization schemes (e.g.,
 *  shared access, roles) would benefit from denormalizing access control data
 *  directly onto the documents being secured.
 *
 * Structural Segregation:
 * Not applicable in this simple ruleset. Separating public and private data into
 * distinct collections would improve security and performance for list operations
 * in more complex applications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data. Only the owning user can read or write their profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages inventory item data. All users can read, but writes are not secured, because ownership is not defined.
     * @path /inventory/{inventoryItemId}
     * @allow (get, list) - Any user can read inventory items.
     * @deny (create, update, delete) - Writes are not currently secured due to missing owner field.
     * @principle Allows public read access, but REQUIRES owner-based access control for writes.
     */
    match /inventory/{inventoryItemId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages vendor data. All users can read, but writes are not secured, because ownership is not defined.
     * @path /vendors/{vendorId}
     * @allow (get, list) - Any user can read vendor data.
     * @deny (create, update, delete) - Writes are not currently secured due to missing owner field.
     * @principle Allows public read access, but REQUIRES owner-based access control for writes.
     */
    match /vendors/{vendorId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

        /**
         * @description Manages inventory item types. All users can read, but writes are not secured, because ownership is not defined.
         * @path /inventoryItemTypes/{typeId}
         * @allow (get, list) - Any user can read inventory item types.
         * @deny (create, update, delete) - Writes are not currently secured due to missing owner field.
         * @principle Allows public read access, but REQUIRES owner-based access control for writes.
         */
        match /inventoryItemTypes/{typeId} {
          allow get, list: if true;
          allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}